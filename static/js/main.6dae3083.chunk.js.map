{"version":3,"sources":["views/PreTrainedModel.js","views/CreateTrainTest.js","App.js","reportWebVitals.js","index.js"],"names":["PreTrainedModel","props","useState","model","setModel","undefined","textToxicity","setTextToxicity","resultToxicity","setResultToxicity","useEffect","a","toxicity","m","getModel","tableEntries","map","el","index","text","identity_attack","insult","obscene","severe_toxicity","sexual_explicit","threat","Container","className","fluid","Row","Col","Card","CardHeader","CardBody","style","overflow","Form","Table","responsive","scope","FormGroup","htmlFor","Input","id","placeholder","rows","type","onChange","event","target","value","Button","color","onClick","classify","then","predictions","console","log","filter","v","label","results","match","CreateTrainTest","maxLength","noWordInLine","vocalSize","oovToken","maxLines","stopWords","processing","file","modelCreation","training","classification","fileCsv","data","dataTokenized","tokenizer","trained","classifyText","result","toxic","severe_toxic","identity_hate","info","setInfo","getData","delimiter","Papa","worker","header","skipEmptyLines","dynamicTyping","complete","processFile","length","sentences","item","comment_text","String","str","toLowerCase","replace","reduce","acc","stopWord","regex","RegExp","trim","words","resize","split","flat","x","find","obj","word","ct","push","sort","b","ind","token","wordsTokenized","sent","retItem","i","alert","arr","newSize","defaultValue","Array","Math","max","fill","inputTensor","tf","print","labelTensor","historyEpoch","surface2","document","getElementById","cBack","earlyStopping","monitor","onEpochEnd","epoch","tfvis","history","height","onTrainBegin","logs","onTrainEnd","fit","batchSize","epochs","shuffle","callbacks","validationSplit","sentence","input","inputTokenized","predict","targetValue","showPercentage","num","toFixed","printTableHeader5Lines","ret","w","printTable5Lines","slice","CardDeck","CardSubtitle","name","files","handleLoadFile","Spinner","width","striped","size","disabled","add","embedding","inputDim","outputDim","inputLength","conv1d","filters","kernelSize","activation","maxPooling1d","poolSize","lstm","units","dense","compile","loss","optimizer","adam","metrics","surface","modelSummary","createModel","trainModel","sm","md","offset","ListGroup","ListGroupItem","Badge","pill","App","isOpen","setIsOpen","Navbar","light","expand","NavbarBrand","href","NavbarToggler","Collapse","navbar","Nav","NavItem","exact","to","activeStyle","NavbarText","path","component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render"],"mappings":"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","file":"static/js/main.6dae3083.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport * as toxicity from '@tensorflow-models/toxicity';\r\nimport '@tensorflow/tfjs';\r\n\r\nimport {\r\n    Card,\r\n    Container,\r\n    Row,\r\n    Col,\r\n    CardBody,\r\n    Form,\r\n    FormGroup,\r\n    Input,\r\n    CardHeader,\r\n    Button,\r\n    Table\r\n} from \"reactstrap\"\r\n\r\n\r\nconst PreTrainedModel = (props) => {\r\n    const [model, setModel] = useState([]);\r\n    const [textToxicity, setTextToxicity] = useState(undefined);\r\n    const [resultToxicity, setResultToxicity] = useState([]);\r\n\r\n    useEffect(() => {\r\n        // Create an scoped async function in the hook\r\n        async function getModel() {\r\n            const th = 0.9;\r\n            \r\n            const m = await toxicity.load(th);\r\n            setModel(m);\r\n        }\r\n        // Execute the created function directly\r\n        getModel();\r\n    }, []);\r\n\r\n\r\n\r\n    function handleTextChange(event) {\r\n        setTextToxicity(event.target.value)\r\n    }\r\n\r\n    function classify() {\r\n        model.classify([textToxicity]).then((predictions) => {\r\n            console.log(predictions);\r\n            console.log(predictions.filter((v) => { return v.label === 'toxicity'; })[0].results[0].match);\r\n\r\n            setResultToxicity([\r\n                ...resultToxicity,\r\n                {\r\n                    text: textToxicity,\r\n                    identity_attack: predictions.filter((v) => { return v.label === 'identity_attack'; })[0].results[0].match?'True':'False',\r\n                    insult: predictions.filter((v) => { return v.label === 'insult'; })[0].results[0].match?'True':'False',\r\n                    obscene: predictions.filter((v) => { return v.label === 'obscene'; })[0].results[0].match?'True':'False',\r\n                    severe_toxicity: predictions.filter((v) => { return v.label === 'severe_toxicity'; })[0].results[0].match?'True':'False',\r\n                    sexual_explicit: predictions.filter((v) => { return v.label === 'sexual_explicit'; })[0].results[0].match?'True':'False',\r\n                    threat: predictions.filter((v) => { return v.label === 'threat'; })[0].results[0].match?'True':'False',\r\n                    toxicity: predictions.filter((v) => { return v.label === 'toxicity'; })[0].results[0].match?'True':'False',\r\n                }\r\n            ]);\r\n\r\n        });\r\n    }\r\n\r\n    const tableEntries = resultToxicity.map((el, index) =>\r\n\r\n        <tr key={index}>\r\n            <td>{ el.text }</td>\r\n            <td>{ el.identity_attack }</td>\r\n            <td>{ el.insult }</td>\r\n            <td>{ el.obscene }</td>\r\n            <td>{ el.severe_toxicity }</td>\r\n            <td>{ el.sexual_explicit }</td>\r\n            <td>{ el.threat }</td>\r\n            <td>{ el.toxicity }</td>\r\n        </tr>\r\n    );\r\n\r\n    return (\r\n\r\n        <Container className=\"pt-2\" fluid>\r\n            <Row className=\"mt-1 mt-md--8\">\r\n                <Col className=\"mb-5 mb-xl-0\">\r\n                    <Card className=\"shadow\">\r\n                        <CardHeader className=\"border-0\">\r\n                            <Row className=\"align-items-center\">\r\n                                <div className=\"col\">\r\n                                    \r\n                                    <h5 className=\"pb-1\"><i className=\"fas fa-biohazard\"></i> Toxicity - Pre-Trained Model</h5>\r\n                                </div>\r\n                                <div className=\"col text-right\">\r\n\r\n                                </div>\r\n                            </Row>\r\n                        </CardHeader>\r\n                        <CardBody style={{ overflow: \"scroll\" }}>\r\n                            <Form>\r\n                                <Row>\r\n                                    <Col>\r\n\r\n\r\n                                    <Table className=\"align-items-center table-hover\" responsive>\r\n                <thead className=\"thead-light\">\r\n                    <tr>\r\n                        <th scope=\"col\">Text</th>\r\n                        <th scope=\"col\">identity attack</th>\r\n                        <th scope=\"col\">insult</th>\r\n                        <th scope=\"col\">obscene</th>\r\n                        <th scope=\"col\">severe toxicity</th>\r\n                        <th scope=\"col\">sexual explicit</th>\r\n                        <th scope=\"col\">threat</th>\r\n                        <th scope=\"col\">toxicity</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    { tableEntries }\r\n                </tbody>\r\n                </Table>\r\n                                    </Col>\r\n\r\n                                </Row>\r\n                                <Row>\r\n\r\n                                    <Col>\r\n                                        <FormGroup>\r\n                                            <label className=\"form-control-label\"\r\n                                                htmlFor=\"text-toxicity\">\r\n                                                Text\r\n                                            </label>\r\n                                            <Input className=\"text-toxicity\"\r\n                                                id=\"text-toxicity\"\r\n                                                placeholder=\"Text to check\"\r\n                                                rows=\"4\"\r\n                                                type=\"textarea\"\r\n                                                onChange={handleTextChange} />\r\n                                        </FormGroup>\r\n                                    </Col>\r\n                                </Row>\r\n                                <Row>\r\n                                <Col>\r\n                                    <FormGroup>\r\n\r\n                                        <Button className=\"btn-icon\"\r\n                                                color=\"primary\"\r\n                                                type=\"button\"\r\n                                                onClick={() => classify() }>\r\n                                            <span className=\"btn-inner--icon mr-0\">\r\n                                                <i className=\"fas fa-binoculars\"></i>\r\n                                            </span>\r\n                                            <span className=\"btn-inner--text d-none d-lg-inline\"> Classify</span>\r\n\r\n                                        </Button>\r\n                                    </FormGroup>\r\n                                </Col>\r\n                            </Row>\r\n                            </Form>\r\n                        </CardBody>\r\n\r\n                    </Card>\r\n                </Col>\r\n            </Row>\r\n        </Container>\r\n    );\r\n\r\n}\r\n\r\nexport default PreTrainedModel;\r\n","import * as tf from '@tensorflow/tfjs';\r\nimport * as tfvis from '@tensorflow/tfjs-vis';\r\nimport React, { useState } from \"react\";\r\nimport * as Papa from \"papaparse\";\r\nimport {\r\n    Card,\r\n    Container,\r\n    Row,\r\n    Col,\r\n    CardBody,\r\n    CardHeader,\r\n    Table,\r\n    FormGroup,\r\n    Button,\r\n    CardSubtitle,\r\n    CardDeck,\r\n    Input,\r\n    ListGroup,\r\n    ListGroupItem,\r\n    Badge,\r\n    Spinner\r\n} from \"reactstrap\";\r\n\r\n\r\nconst CreateTrainTest = (props) => {\r\n\r\n    const maxLength = 40; // Maximum number of words in a sentences, it's the same as the input of the model\r\n\r\n    const noWordInLine = \"NWIL\"; // In sentences with less of \"maxLength\" words the remaining positions will be filled with this.\r\n\r\n    const vocalSize = 3000; // Maximum number of words used by tokenization, not all words in setences will be hear. \r\n                            // If any word in the setence is not hear the return will be the token for \"oovToken\"   \r\n\r\n    const oovToken = \"outofvocabulary\";  // teh word is not in the words used for tokenization\r\n\r\n    const maxLines = 200000; //Maximum lines to process from the file\r\n\r\n    // list of stop words to remove of teh text\r\n    const stopWords = ['a', 'about', 'above', 'after', 'again', 'against', 'ain', 'all', 'am', 'an', 'and', 'any', 'are', 'aren', \"aren't\", 'as', 'at', 'b', 'be', 'because', 'been', 'before', 'being', 'below', 'between', 'both', 'but', 'by', 'c', 'can', 'couldn', \"couldn't\", 'd', 'did', 'didn', \"didn't\", 'do', 'does', 'doesn', \"doesn't\", 'doing', 'don', \"don't\", 'down', 'during', 'e', 'each', 'f', 'few', 'for', 'from', 'further', 'g', 'h', 'had', 'hadn', \"hadn't\", 'has', 'hasn', \"hasn't\", 'have', 'haven', \"haven't\", 'having', 'he', 'her', 'here', 'hers', 'herself', 'him', 'himself', 'his', 'how', 'i', 'if', 'in', 'into', 'is', 'isn', \"isn't\", 'it', \"it's\", 'its', 'itself', 'j', 'just', 'k', 'l', 'll', 'm', 'ma', 'me', 'mightn', \"mightn't\", 'more', 'most', 'mustn', \"mustn't\", 'my', 'myself', 'needn', \"needn't\", 'n', 'no', 'nor', 'not', 'now', 'o', 'of', 'off', 'on', 'once', 'only', 'or', 'other', 'our', 'ours', 'ourselves', 'out', 'over', 'own', 'p', 'q', 'r', 're', 's', 'same', 'shan', \"shan't\", 'she', \"she's\", 'should', \"should've\", 'shouldn', \"shouldn't\", 'so', 'some', 'such', 't', 'than', 'that', \"that'll\", 'the', 'their', 'theirs', 'them', 'themselves', 'then', 'there', 'these', 'they', 'this', 'those', 'through', 'to', 'too', 'u', 'under', 'until', 'up', 've', 'v', 'very', 'w', 'was', 'wasn', \"wasn't\", 'we', 'were', 'weren', \"weren't\", 'what', 'when', 'where', 'which', 'while', 'who', 'whom', 'why', 'will', 'with', 'won', \"won't\", 'wouldn', \"wouldn't\", 'y', 'you', \"you'd\", \"you'll\", \"you're\", \"you've\", 'your', 'yours', 'yourself', 'yourselves', 'x','z'];    // Information that we want to maintain \r\n    \r\n    const [info, setInfo] = useState({\r\n        processing: {file:false, modelCreation:false, training: false, classification: false},\r\n        fileCsv: undefined, // Loaded file with the training data\r\n        data: undefined, // array with sentances x words used for training. Each element is a word. Each line is a sentance. \r\n        dataTokenized: undefined,  // data Tokenized\r\n        target: undefined, // all the lables of the training data\r\n        tokenizer: undefined, // all words and tokens\r\n        model: undefined, // the prediction model\r\n        trained: false, // The model is already trained and ready for use\r\n        classifyText: '', // Text to classify as test\r\n        result: {toxic: undefined, severe_toxic: undefined,  obscene: undefined, threat: undefined, insult: undefined, identity_hate:undefined}\r\n    });\r\n\r\n\r\n    /**\r\n     * Get the data from the file and call function to precess it.\r\n     *\r\n     * @param file\r\n     * @param delimiter\r\n     *\r\n     * @return  nothing\r\n     * @see\r\n     */\r\n    async function getData(file, delimiter) {\r\n        Papa.parse(file, {\r\n            delimiter: delimiter,\r\n            worker: true,\r\n            header: true,\r\n            skipEmptyLines: true,\r\n            dynamicTyping: true,\r\n            complete: function (results) {\r\n                console.log(\"Finished:\", results.data);\r\n                processFile(results.data);\r\n            }\r\n        });\r\n    }\r\n\r\n\r\n    /**\r\n     * Process the file and store results in info\r\n     *\r\n     * @param data\r\n     *\r\n     * @return  nothing\r\n     * @see\r\n     */\r\n\r\n    async function processFile(data) {\r\n\r\n        // If the data has more lines that the maximum allowed \r\n        // the array is resized \r\n        if (data.length > maxLines) {\r\n            data.length = maxLines;\r\n        }\r\n\r\n        // Get only the comment_text fild \r\n        let sentences = data.map((item) => {\r\n            if (typeof item.comment_text === 'string' || item.comment_text instanceof String) {\r\n                return item.comment_text;\r\n            }\r\n            else {\r\n                return \"\";\r\n            }\r\n        });\r\n\r\n        // Change to lower case\r\n        sentences = sentences.map((str) => { return str.toLowerCase() });\r\n\r\n        \r\n        // Remove stop words and other characters\r\n        sentences = sentences.map((item) => {\r\n            return item.replace(\"\\n\", \" \")\r\n                .replace(\"\\\\\", \" \")\r\n                .replace(\"\\b\", \" \")\r\n                .replace(\"\\f\", \" \")\r\n                .replace(\"\\r\", \" \")\r\n                .replace(\"\\t\", \" \")\r\n                .replace(\"'s\", \" \")\r\n                .replace(\"can't\", \" cannot \")\r\n                .replace(\"-\", \" \")\r\n                .replace(\"n't\", \" not \")\r\n                .replace(\"'scuse\", \" excuse \")\r\n                .replace(/[&/\\\\#,+=()$~%!|.\":*?<>{}[\\]\\d]/ig, \" \")\r\n                \r\n        });\r\n\r\n        console.log(sentences);\r\n\r\n        sentences = sentences.map((item) => {\r\n            return stopWords.reduce((acc, stopWord) => {\r\n                const regex = new RegExp(\"^\\\\s*\" + stopWord + \"\\\\s*$\" +\r\n                                         \"|^\\\\s*\" + stopWord + \"\\\\s+\" +\r\n                                         \"|\\\\s+\" + stopWord + \"\\\\s*$\" +\r\n                                         \"|\\\\s+\" + stopWord + \"\\\\s+\", \"ig\");\r\n\r\n                return acc.replace(regex, \" \");\r\n            }, item).replace(/\\s+/g, \" \")\r\n                    .trim();\r\n        });\r\n\r\n        console.log(sentences);\r\n\r\n        // Convert sentences to words\r\n        const words = sentences.map((item) => { return resize(item.split(\" \"), maxLength, noWordInLine) });\r\n\r\n\r\n        console.log(words);\r\n\r\n        // Create array with all words and id as token and add \"noWordInLine\"\r\n\r\n        let tokenizer = words.flat();\r\n\r\n        console.log('after flat');\r\n        \r\n        tokenizer = tokenizer.reduce((acc, el) => { \r\n            const x = acc.find(obj => obj.word === el); \r\n            if (x){ \r\n                x.ct = x.ct + 1;\r\n             } \r\n             else{\r\n                 acc.push({ct: 1, word: el})\r\n             } \r\n             return acc;\r\n         }, [{ ct: vocalSize*100+1, word: noWordInLine }, \r\n             { ct: vocalSize*100, word: oovToken }]);\r\n        \r\n        console.log('after reduce');\r\n                  \r\n        tokenizer = tokenizer.sort((a,b) =>{return b.ct - a.ct;});\r\n\r\n        console.log('after sort');\r\n\r\n        tokenizer = tokenizer.map((el, ind) => {return { ct: el.ct, token: ind, word: el.word }});\r\n\r\n        console.log('after map');\r\n\r\n        // Resize the array to has a maximum size \"vocalSize\"\r\n        if (tokenizer.length > vocalSize) {\r\n            tokenizer.length = vocalSize;\r\n        }\r\n\r\n        // Convert works to respective token\r\n        const wordsTokenized = words.map(\r\n            (sent) => {\r\n                return sent.map(\r\n                    (item) => {\r\n                        const retItem = tokenizer.find((i) => { return i.word === item; });\r\n                        return (retItem ? retItem.token : 1);\r\n                    })\r\n            });\r\n\r\n\r\n        // Get the lables and create a training output vector\r\n        const target = data.map((item) => {\r\n            return [item.identity_hate,\r\n            item.insult,\r\n            item.obscene,\r\n            item.severe_toxic,\r\n            item.threat,\r\n            item.toxic];\r\n        });\r\n\r\n        // Store all information in \"info\" variable. \r\n        setInfo({ ...info, tokenizer: tokenizer, \r\n                           data: words, \r\n                           dataTokenized: wordsTokenized, \r\n                           target: target,\r\n                           processing: {...info.processing, file: false} });\r\n\r\n        alert(\"File processing concluded!!\");\r\n    }\r\n\r\n    /**\r\n     * Resize a array to a new size and put a default values in the new possitions \r\n     *\r\n     * @param arr array to resize\r\n     * @param newSize new size of the array\r\n     * @param defaultValue value to put in the new positions  \r\n     *\r\n     * @return  new resized array \r\n     * @see\r\n     */\r\n    function resize(arr, newSize, defaultValue) {\r\n        if (newSize > arr.length)\r\n            return [...arr, ...Array(Math.max(newSize - arr.length, 0)).fill(defaultValue)];\r\n        else {\r\n            arr.length = newSize;\r\n            return arr;\r\n        }\r\n\r\n    }\r\n\r\n    /**\r\n     * Function to create the model that will be used \r\n     * Has 5 layers:\r\n     *   Embedding\r\n     *   Conv1D\r\n     *   MaxPooling1D\r\n     *   LSTM\r\n     *   Dense\r\n     *\r\n     * @return  nothing \r\n     * @see\r\n     */\r\n    function createModel() {\r\n        const embedingDim = 32 //15;   //32;\r\n\r\n        // Create a sequential model\r\n        const model = tf.sequential();\r\n\r\n        // Create a embedding layer \r\n        // tf.keras.layers.Embedding(vocab_size, embeding_dim, input_length= max_length ),\r\n        model.add(tf.layers.embedding({ inputDim: vocalSize, outputDim: embedingDim, inputLength: maxLength }));\r\n\r\n        // Create a Conv1D layer \r\n        // tf.keras.layers.Conv1D(64, 5, activation='relu'),\r\n        model.add(tf.layers.conv1d({ filters: 64, kernelSize: 5, activation: 'relu' }));\r\n\r\n        // Create a MaxPooling1D layer \r\n        //tf.keras.layers.MaxPooling1D(pool_size=4),\r\n        model.add(tf.layers.maxPooling1d({ poolSize: 4 }));\r\n\r\n        // Create a LSTM layer \r\n        // tf.keras.layers.LSTM(64),\r\n        model.add(tf.layers.lstm({ units: 64 }));\r\n\r\n        // Create a Dense layer \r\n        // tf.keras.layers.Dense(6, activation='sigmoid')\r\n        model.add(tf.layers.dense({ units: 6, activation: \"sigmoid\" }));\r\n\r\n\r\n        // Compile the model\r\n        model.compile({ loss: 'binaryCrossentropy', optimizer: tf.train.adam(), metrics: ['accuracy'] });\r\n\r\n\r\n        //model.summary(undefined,[],printFn);\r\n        var surface = document.getElementById('ModelInfo');\r\n        tfvis.show.modelSummary(surface, model);\r\n\r\n\r\n        // Store the model in the \"info\"\r\n        setInfo({ ...info, model: model});\r\n    }\r\n\r\n    /**\r\n     * Function to train the model \r\n     *\r\n     * @return  nothing \r\n     * @see\r\n     */\r\n    async function trainModel() {\r\n\r\n        // Convert the input and label data to Tensors\r\n        console.log(info.dataTokenized);\r\n        console.log(info);\r\n\r\n        setInfo({...info, processing: {...info.processing, training: true} });\r\n\r\n        const inputTensor = tf.tensor2d(info.dataTokenized, [info.dataTokenized.length, maxLength]);\r\n        inputTensor.print();\r\n        const labelTensor = tf.tensor2d(info.target, [info.target.length, 6]);\r\n        labelTensor.print();\r\n\r\n        // Variables to store the training history\r\n        const historyEpoch = [];\r\n        //const historyBatch = [];\r\n\r\n        //const surface1 = document.getElementById('BatchGraph');\r\n        const surface2 = document.getElementById('EpochGraph');\r\n\r\n        // Callbacks functions to use during the training\r\n        const cBack = [\r\n            tf.callbacks.earlyStopping({monitor: 'val_acc'}), \r\n            new tf.CustomCallback({onEpochEnd: (epoch, log) => {  \r\n                console.log('onEpochEnd:' );\r\n                historyEpoch.push(log);\r\n                tfvis.show.history(surface2, historyEpoch, ['loss', 'val_loss', 'acc', 'val_acc'], { height: 200});\r\n            }}),\r\n            new tf.CustomCallback({onTrainBegin: (logs) => {\r\n                console.log('onTrainBegin:' );\r\n            }}),\r\n            new tf.CustomCallback({onTrainEnd: (logs) => {\r\n                console.log('onTrainEnd:' );\r\n                setInfo({...info, trained: true, processing: {...info.processing, training: false} });\r\n                alert(\"Trainning concluded!!\");\r\n            }})\r\n        ];\r\n\r\n        // Train the model\r\n        info.model.fit(inputTensor, labelTensor, {\r\n            batchSize: 32, //500, //32,\r\n            epochs: 5,\r\n            shuffle: true,\r\n            callbacks: cBack,\r\n            validationSplit: 0.20\r\n        });\r\n\r\n        \r\n    }\r\n\r\n    /**\r\n     * Function to classify a new value \r\n     *\r\n     * @return  nothing \r\n     * @see\r\n     */\r\n    async function classify(){\r\n\r\n        //Transform data\r\n\r\n        // Change to lower case\r\n        let sentence = info.classifyText.toLowerCase();\r\n\r\n        sentence = sentence.replace(\"\\n\", \" \")\r\n                            .replace(\"\\\\\", \" \")\r\n                            .replace(\"\\b\", \" \")\r\n                            .replace(\"\\f\", \" \")\r\n                            .replace(\"\\r\", \" \")\r\n                            .replace(\"\\t\", \" \")\r\n                            .replace(\"'s\", \" \")\r\n                            .replace(\"can't\", \"cannot \")\r\n                            .replace(\"-\", \" \")\r\n                            .replace(\"n't\", \" not \")\r\n                            .replace(\"'scuse\", \" excuse \")\r\n                            .replace(/[&/\\\\#,+=()$~%!|.\":*?<>{}[\\]\\d]/ig, \" \")\r\n\r\n        console.log(sentence);\r\n        // Remove stop words and other characters\r\n        sentence = stopWords.reduce((acc, stopWord) => {\r\n                                    const regex = new RegExp(\"^\\\\s*\" + stopWord + \"\\\\s*$\" + \r\n                                                             \"|^\\\\s*\" + stopWord + \"\\\\s+\" +\r\n                                                             \"|\\\\s+\" + stopWord + \"\\\\s*$\" +\r\n                                                             \"|\\\\s+\" + stopWord + \"\\\\s+\", \"ig\");\r\n                                    return acc.replace(regex, \" \");\r\n            }, sentence)\r\n            .replace(/\\s+/g, \" \")\r\n            .trim();\r\n\r\n        console.log(sentence);\r\n        \r\n        // Convert sentence to words\r\n        const input = resize(sentence.split(\" \"), maxLength, noWordInLine);\r\n\r\n        console.log(input);\r\n\r\n        console.log(info.tokenizer);\r\n        \r\n        // Convert works to respective token\r\n        const inputTokenized =  input.map( (item) => {\r\n                        const retItem = info.tokenizer.find((i) => { return i.word === item; });\r\n                        return (retItem ? retItem.token : -1);\r\n                    });\r\n\r\n        console.log(inputTokenized);\r\n\r\n        const inputTensor = tf.tensor2d(inputTokenized, [1, inputTokenized.length]);\r\n\r\n        inputTensor.print();\r\n\r\n        const result =  info.model.predict(inputTensor);\r\n\r\n        result.print();\r\n        console.log(result.print());\r\n\r\n        const targetValue = await result.data();\r\n\r\n        console.log(targetValue);\r\n\r\n        setInfo({...info, result: {\r\n                            identity_hate: targetValue?showPercentage(targetValue[0]):undefined, \r\n                            insult: targetValue?showPercentage(targetValue[1]):undefined,  \r\n                            obscene: targetValue?showPercentage(targetValue[2]):undefined, \r\n                            severe_toxic: targetValue?showPercentage(targetValue[3]):undefined, \r\n                            threat: targetValue?showPercentage(targetValue[4]):undefined, \r\n                            toxic: targetValue?showPercentage(targetValue[5]):undefined\r\n                        }\r\n        });\r\n\r\n        \r\n    }\r\n\r\n    /**\r\n     * get a number between 0 and 1 and return and string with percentage \r\n     *\r\n     * @return  nothing \r\n     * @see\r\n     */\r\n    function showPercentage(num){\r\n        return (num*100).toFixed(2) + \" %\";\r\n    }\r\n    \r\n\r\n    /**\r\n     * Function called by the file loader buttom  \r\n     *\r\n     * @return  nothing \r\n     * @see\r\n     */\r\n    async function handleLoadFile() {\r\n        setInfo({...info, processing: {...info.processing, file: true}});\r\n        getData(info.fileCsv, ',');\r\n    }\r\n\r\n    /**\r\n     * Function called by the file loader component  \r\n     *\r\n     * @return  nothing \r\n     * @see\r\n     */\r\n    function handleFileChange(event) {\r\n        setInfo({ ...info, fileCsv: event.target.files[0] });\r\n        console.log(event.target.files[0]);\r\n    }\r\n\r\n\r\n    /**\r\n     * Function called by the textbox with teh text to classify  \r\n     *\r\n     * @return  nothing \r\n     * @see\r\n     */\r\n    function handleTextChange(event) {\r\n        setInfo({ ...info, classifyText: event.target.value} )\r\n    }\r\n\r\n\r\n    //Print header table\r\n    const printTableHeader5Lines = (arr)  => {\r\n        if (arr){\r\n            const ret = arr[0].map( (w, i) => {return <th key={i}>{'w' + i}</th>});\r\n            return <tr key={-1}><th scope=\"row\">#</th>{ret}</tr>;\r\n        }\r\n        else{\r\n            return undefined;  \r\n        }\r\n    };\r\n\r\n\r\n\r\n    //Print into table\r\n    const printTable5Lines = (arr) => arr&&arr.slice(0, 5).map((sentence, id) => {\r\n        const ret = sentence.map((word, i) => { return <td key={i}>{word}</td> });\r\n        return <tr key={id}><th scope=\"row\">{id}</th>{ret}</tr>;\r\n    });\r\n\r\n    return (\r\n\r\n        <Container className=\"pt-2\" fluid>\r\n            <Row className=\"mt-1 mt-md--8\">\r\n                <Col className=\"mb-5 mb-xl-0\">\r\n                    <Card className=\"shadow\">\r\n                        <CardHeader className=\"border-0\">\r\n                            <Row className=\"align-items-center\">\r\n                                <div className=\"col\">\r\n                                    <h5 className=\"pb-1\"><i className=\"fas fa-biohazard\"></i> Toxicity - Create, Train and Test Model</h5>\r\n                                </div>\r\n                                <div className=\"col text-right\">\r\n                                </div>\r\n                            </Row>\r\n                        </CardHeader>\r\n                        <CardBody style={{ overflow: \"scroll\" }}>\r\n                            <CardDeck>\r\n                                <Card>\r\n                                    <CardHeader><i className=\"fas fa-upload\"></i> 1 - Load & Process Data</CardHeader>\r\n                                    <CardBody>\r\n                                        <CardSubtitle className=\"mb-2 text-muted\">Load data from file and transform in tensors to use in a prediction model training and validation.</CardSubtitle>\r\n                                            <Col>\r\n                                                <Row>\r\n                                                    <Col>\r\n                                                        <FormGroup>\r\n\r\n                                                            <div className=\"custom-file\">\r\n                                                                <input type=\"file\" className=\"custom-file-input\" name=\"file\" id=\"file\" onChange={handleFileChange} />\r\n                                                                <label className=\"custom-file-label\" htmlFor=\"inputGroupFile01\">{info.fileCsv ? info.fileCsv.name : 'Choose file'}</label>\r\n                                                            </div>\r\n                                                        </FormGroup>\r\n                                                    </Col>\r\n                                                    <Col>\r\n                                                        <FormGroup>\r\n                                                            <Button className=\"btn-icon\"\r\n                                                                color=\"primary\"\r\n                                                                type=\"button\"\r\n                                                                onClick={() => handleLoadFile()}>\r\n                                                                <span className=\"btn-inner--icon mr-0\">\r\n                                                                    <i className=\"fas fa-binoculars\"></i>\r\n                                                                </span>\r\n                                                                <span className=\"btn-inner--text d-none d-lg-inline\"> \r\n                                                                {!info.processing.file ? \" Load File\" : \" Loading..\"}</span>\r\n                                                                {info.processing.file ? (\r\n                                                                    <Spinner\r\n                                                                    style={{ width: \"0.7rem\", height: \"0.7rem\" }}\r\n                                                                    type=\"grow\"\r\n                                                                    color=\"light\"\r\n                                                                    />\r\n                                                                ):null}\r\n                                                            </Button>\r\n                                                        </FormGroup>\r\n                                                    </Col>\r\n                                                </Row>\r\n                                                <Row>\r\n                                                    <Table striped responsive size=\"sm\"><thead>{printTableHeader5Lines(info.data)}</thead><tbody>{printTable5Lines(info.data)}</tbody></Table>\r\n                                                    <Table striped responsive size=\"sm\"><thead>{printTableHeader5Lines(info.dataTokenized)}</thead><tbody>{printTable5Lines(info.dataTokenized)}</tbody></Table>\r\n                                                </Row>\r\n                                            </Col>\r\n                                    </CardBody>\r\n                                </Card>\r\n                                <div>   \r\n                                    <Card>\r\n                                        <CardHeader><i className=\"fab fa-buromobelexperte\"></i> 2 - Create a Prediction Model</CardHeader>\r\n                                        <CardBody>\r\n                                            <CardSubtitle className=\"mb-2 text-muted\">Create a sequencial prediction model with five layers.</CardSubtitle>\r\n                                                <Col>\r\n                                                    <Row>\r\n                                                        <FormGroup>\r\n                                                            <Button disabled={!info.dataTokenized}\r\n                                                                className=\"btn-icon\"\r\n                                                                color=\"primary\"\r\n                                                                type=\"button\"\r\n                                                                onClick={() => createModel()}>\r\n                                                                <span className=\"btn-inner--icon mr-0\">\r\n                                                                    <i className=\"fas fa-plus-circle\"></i>\r\n                                                                </span>\r\n                                                                <span className=\"btn-inner--text d-none d-lg-inline\"> Create Model</span>\r\n                                                            </Button>\r\n                                                        </FormGroup>\r\n                                                    </Row>\r\n                                                    <Row>\r\n                                                        <div id=\"ModelInfo\" name=\"ModelInfo\"></div>\r\n                                                    </Row>\r\n                                                </Col>\r\n                                        </CardBody>\r\n                                    </Card>\r\n                                    <div>&nbsp;</div>\r\n                                    <Card>\r\n                                    <CardHeader><i className=\"fas fa-plane-departure\"></i> 3 - Start to Train Model</CardHeader>\r\n                                    <CardBody>\r\n                                        <CardSubtitle className=\"mb-2 text-muted\">Train the created model with the loaded training data.</CardSubtitle>\r\n                                            <Col>\r\n                                                <Row>\r\n                                                    <FormGroup>\r\n                                                        <Button disabled={!info.model}\r\n                                                            className=\"btn-icon\"\r\n                                                            color=\"primary\"\r\n                                                            type=\"button\"\r\n                                                            onClick={() => trainModel()}>\r\n                                                            <span className=\"btn-inner--icon mr-0\">\r\n                                                                <i className=\"fas fa-dumbbell\"></i>\r\n                                                            </span>\r\n                                                            <span className=\"btn-inner--text d-none d-lg-inline\">\r\n                                                            {!info.processing.training ? \" Train Model\" : \" Training..\"}</span>\r\n                                                                {info.processing.training ? (\r\n                                                                    <Spinner\r\n                                                                    style={{ width: \"0.7rem\", height: \"0.7rem\" }}\r\n                                                                    type=\"grow\"\r\n                                                                    color=\"light\"\r\n                                                                    />\r\n                                                                ):null}\r\n                                                        </Button>\r\n                                                    </FormGroup>\r\n                                                </Row>\r\n                                                <Row>\r\n                                                    <Col>\r\n                                                        <div id=\"BatchGraph\"></div>\r\n                                                    </Col>\r\n                                                </Row>  \r\n                                                <Row>\r\n                                                    <Col>\r\n                                                        <div id=\"EpochGraph\"></div>\r\n                                                    </Col>\r\n                                                </Row>\r\n                                            </Col>\r\n                                    </CardBody>\r\n                                </Card>\r\n                                </div>\r\n                                <Card>\r\n                                    <CardHeader><i className=\"fas fa-stethoscope\"></i> 4 - Test the Model</CardHeader>\r\n                                    <CardBody>\r\n                                        <CardSubtitle className=\"mb-2 text-muted\">Last step is test the model with new data.</CardSubtitle>\r\n                                            <Row>\r\n                                                <Col>\r\n                                                    <Input \r\n                                                        className=\"text-toxicity\"\r\n                                                        id=\"text-toxicity\"\r\n                                                        placeholder=\"Text to classify\"\r\n                                                        rows=\"4\"\r\n                                                        type=\"textarea\"\r\n                                                        onChange={handleTextChange} />\r\n                                                </Col>\r\n                                            </Row>\r\n                                            <Row>&nbsp;</Row>\r\n                                            <Row>\r\n                                                <Col>\r\n                                                    <Button disabled={!info.trained}\r\n                                                            className=\"btn-icon\"\r\n                                                            color=\"primary\"\r\n                                                            type=\"button\"\r\n                                                            onClick={() => classify() }>\r\n                                                        <span className=\"btn-inner--icon mr-0\">\r\n                                                            <i className=\"fas fa-vial\"></i>\r\n                                                        </span>\r\n                                                        <span className=\"btn-inner--text d-none d-lg-inline\"> Classify</span>\r\n\r\n                                                    </Button>\r\n                                                </Col>\r\n                                            </Row>\r\n                                            <Row>&nbsp;</Row>\r\n                                            <Row>\r\n                                                <Col sm=\"12\" md={{ size: 8, offset: 2 }}>\r\n                                                    <ListGroup>\r\n                                                        <ListGroupItem className=\"justify-content-between\">Toxic <Badge pill>{info.result&&info.result.toxic}</Badge></ListGroupItem>\r\n                                                        <ListGroupItem className=\"justify-content-between\">Severe Toxic <Badge pill>{info.result&&info.result.severe_toxic}</Badge></ListGroupItem>\r\n                                                        <ListGroupItem className=\"justify-content-between\">Obscene <Badge pill>{info.result&&info.result.obscene}</Badge></ListGroupItem>\r\n                                                        <ListGroupItem className=\"justify-content-between\">Threat <Badge pill>{info.result&&info.result.threat}</Badge></ListGroupItem>\r\n                                                        <ListGroupItem className=\"justify-content-between\">Insult <Badge pill>{info.result&&info.result.insult}</Badge></ListGroupItem>\r\n                                                        <ListGroupItem className=\"justify-content-between\">Identity Hate <Badge pill>{info.result&&info.result.identity_hate}</Badge></ListGroupItem>\r\n                                                    </ListGroup>\r\n                                                </Col>\r\n                                            </Row>\r\n                                    </CardBody>\r\n                                </Card>\r\n                            </CardDeck>\r\n                        </CardBody>\r\n                    </Card>\r\n                </Col>\r\n            </Row>\r\n        </Container>\r\n    );\r\n\r\n}\r\n\r\nexport default CreateTrainTest;\r\n","\n\nimport React, { useState } from 'react';\nimport { BrowserRouter, Route, Switch, Link, NavLink } from 'react-router-dom';\nimport { Navbar, NavbarBrand, NavbarToggler, Collapse, Nav, NavItem, NavbarText  } from 'reactstrap';\nimport PreTrainedModel from './views/PreTrainedModel';\nimport CreateTrainTest from './views/CreateTrainTest';\n\nfunction App() {\n  const [isOpen, setIsOpen] = useState(false);\n  const toggle = () => setIsOpen(!isOpen);\n\n  return (\n    <div className=\"App\">\n      <BrowserRouter>\n        <div>\n          <Navbar color=\"light\" light expand=\"md\">\n            <NavbarBrand href=\"/toxicity\">Toxicity</NavbarBrand>\n            <NavbarToggler onClick={toggle} />\n            <Collapse isOpen={isOpen} navbar>\n              <Nav className=\"mr-auto\" navbar>\n                <NavItem>\n                  <NavLink exact to=\"/toxicity\" activeStyle={{color: 'red'}} className=\"nav-link\">Pre-Trained Model</NavLink>\n                </NavItem>\n                <NavItem>&nbsp;</NavItem>\n                <NavItem>\n                  <NavLink exact to=\"/toxicity/create_train_test\" activeStyle={{color: 'red'}} className=\"nav-link\">Create Train & Test</NavLink>\n                </NavItem>\n              </Nav>\n              <NavbarText>Toxic comment classification using Tensorflow and React.js</NavbarText>\n            </Collapse>\n          </Navbar>\n          <Switch>\n            <Route path=\"/toxicity/create_train_test\" component={props => <CreateTrainTest />} />\n            <Route path=\"/toxicity\" component={props => <PreTrainedModel />} />\n          </Switch>\n        </div>\n      </BrowserRouter>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport '@fortawesome/fontawesome-free/js/all.js';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <App/>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n\n\n"],"sourceRoot":""}